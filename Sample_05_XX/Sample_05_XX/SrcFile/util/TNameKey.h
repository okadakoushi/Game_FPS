#pragma once

#include "Util.h"
#include <string>

template<class T>
class TNameKey {
	using MyString = std::basic_string<T, std::char_traits<T>, std::allocator<T>>;
	MyString m_name;			//!<名前
	unsigned int m_hashCode = 0;	//!<ハッシュ値。
public:
	TNameKey() {}
	/// <summary>
	/// 引数付きコンストラクタ。
	/// <para>ファイル名でハッシュを作成。</para>
	/// </summary>
	/// <param name="name">ファイルパス。</param>
	TNameKey(const T* name)
	{
		Init(name);
	}
	//初期化。
	void Init(const T* name)
	{
		if (name != nullptr) {
			m_name = name;
			//名前をハッシュ値に変換。
			m_hashCode = Util::MakeHash(name);
		}
	}
	//ハッシュコードを取得。
	unsigned int GetHashCode() const
	{
		return m_hashCode;
	}
	//名前を取得。
	const T* GetName() const
	{
		return m_name.c_str();
	}
};

using NameKey = TNameKey<char>;
using WNameKey = TNameKey<wchar_t>;